<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAtxJREFUWEflljFv
        2lAUhc2/aOYq7P0BYawQUyd+AGskpKgbExNjKiG1I8pQdaBTFpRsiKGVOjB5QpkalRmxdrh934NjGfsZ
        vyghSy1d2X72u/fcc+69diPJH+MHO7h/4ZvzN2+T93+S5PNVo1F2Pbi3BAAvYO07s/PpzrjG53g8ttFo
        lF2HAVw4EDIAYcX7/FrofSWi/STU+2L9ft96vZ73yXUYgDad6Hz5acdGGIB7YH83tt1u/fkpxp4Yw+f1
        d9sxUTr2ANbrtS2Xy2hbrVYWMvwULQoAzgCwWCyCFgOuClA9gE0aRSV0k91sNrObm6++wjlPp1O/Bkie
        F2WpB+A0ipFAgQn67demZKxjsIg/GOH8JABslhSinTU5l1PpfPvbLG8U22Aw8IzEA9hLUNUBACHjfAGn
        dhg4dQ3EGmdADIdDn4i663gXOACgnc/nJRPtsKAiE6CQDGJDE5A99RI4ANKsWMkAIND8YZ51B2uY5JJU
        AgQLXDN4eC8agCo4f4YVnIleZZhRDu0B4z1kgAlzCUZLoOwIzDUtptmgrPOZw0zIAEBwCtIeIwCUppfb
        BLUAwRnXeeqL9PNc8gEotY3vHGRgvZaBEAAVpiSoor/YHZKEz3A0AAUrSkAWoj6GAU1D/BFcEuCn+mO0
        7wK0kvkJ5u6RgDpQJ6jSpXto/lOggO12uzaZTHwRHgdAHbuXisYQIQAA0BAJQhXP2n1ykQ2q9NGyHxEY
        oQ0rAfCgOIBEtf289R3APRUdA4Ls0b7VamVzANb4KQlL4H6bkndl89rdtX32mmo41oeoNAf2w4d9zWbT
        krMPJb9IUv4f2fcqGzGGB4Hsx6UHYB/bfh30nU7HG8Wl9/SR4h2ekbnekU/OKsjaH25Lrw+CA4BCUlA5
        AACmIP7P97lHVXD183P9H91/LDj0k+3JAPy/waGUNlO1q+DQ/OS0S0/aSJVMtb9qcIHI9+mrZX6yio50
        /A/1GC762t0FJQAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AP/AAAD/wAAB/+AAAf/xEQP//////w==
</value>
  </data>
</root>